name: Screenshot & Unique Visitor/Likes System

on:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 */2 * * *' # Кожні 2 години
  workflow_dispatch:
    inputs:
      add_like:
        description: 'Add your like (only one per user allowed)'
        required: false
        default: false
        type: boolean
      screenshot_selector:
        description: 'CSS selector for screenshot'
        required: false
        default: 'body'
        type: string

env:
  SCREENSHOT_WIDTH: ${{ vars.SCREENSHOT_WIDTH || '1920' }}
  SCREENSHOT_HEIGHT: ${{ vars.SCREENSHOT_HEIGHT || '1080' }}
  BADGE_STYLE: ${{ vars.BADGE_STYLE || 'for-the-badge' }}
  BADGE_COLOR: ${{ vars.BADGE_COLOR || 'brightgreen' }}
  LIKES_COLOR: ${{ vars.LIKES_COLOR || 'red' }}

jobs:
  update-readme-and-visitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Node.js dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          else
            echo '{"name": "screenshot-generator", "version": "1.0.0", "dependencies": {"puppeteer": "^21.0.0"}}' > package.json
            npm install
          fi
        env:
          PUPPETEER_SKIP_DOWNLOAD: true

      - name: Create screenshot script if not exists
        run: |
          if [ ! -f "screenshot.js" ] && [ ! -f "scripts/screenshot.js" ]; then
            mkdir -p scripts
            cat > scripts/screenshot.js << 'EOF'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');

          async function takeScreenshot() {
            const browser = await puppeteer.launch({
              args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],
              executablePath: '/usr/bin/google-chrome'
            });
            
            const page = await browser.newPage();
            
            const githubPages = `https://${process.env.GITHUB_REPOSITORY_OWNER}.github.io/${process.env.GITHUB_REPOSITORY_NAME}/`;
            const indexPath = path.join(process.cwd(), 'index.html');
            
            let targetUrl;
            if (fs.existsSync(indexPath)) {
              targetUrl = `file://${indexPath}`;
            } else {
              targetUrl = githubPages;
              console.log(`📡 Using GitHub Pages URL: ${targetUrl}`);
            }
            
            try {
              await page.setViewport({
                width: parseInt(process.env.SCREENSHOT_WIDTH) || 1920,
                height: parseInt(process.env.SCREENSHOT_HEIGHT) || 1080
              });
              
              await page.goto(targetUrl, { waitUntil: 'networkidle2', timeout: 30000 });
              
              const selector = process.env.SCREENSHOT_SELECTOR || 'body';
              await page.waitForSelector(selector, { timeout: 10000 });
              
              await page.screenshot({
                path: 'screenshot.png',
                fullPage: true,
                type: 'png'
              });
              
              console.log('✅ Screenshot created successfully');
            } catch (error) {
              console.error('❌ Screenshot failed:', error.message);
              
              const fallbackSvg = `
                <svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
                  <rect width="800" height="600" fill="#f0f0f0"/>
                  <text x="400" y="300" text-anchor="middle" fill="#333" font-size="24" font-family="Arial">
                    Screenshot not available
                  </text>
                </svg>
              `;
              
              fs.writeFileSync('screenshot.svg', fallbackSvg);
              console.log('📄 Created SVG fallback');
            }
            
            await browser.close();
          }

          takeScreenshot().catch(console.error);
          EOF
          fi

      - name: Generate screenshot
        run: |
          if [ -f "package.json" ] && npm run | grep -q "screenshot"; then
            npm run screenshot
          else
            node scripts/screenshot.js
          fi
        env:
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          SCREENSHOT_SELECTOR: ${{ github.event.inputs.screenshot_selector }}

      - name: Manage unique likes system
        run: |
          echo "💖 Managing unique likes system..."

          # Ініціалізуємо файл лайків якщо його немає
          if [ ! -f "likes-data.json" ]; then
            cat > likes-data.json << 'EOF'
          {
            "total_likes": 0,
            "unique_users": [],
            "created_at": "",
            "last_updated": ""
          }
          EOF
            echo "📝 Created initial likes data file"
          fi

          # Отримуємо поточні дані
          CURRENT_LIKES=$(jq -r '.total_likes' likes-data.json 2>/dev/null || echo "0")

          # Отримуємо користувача який запустив workflow
          CURRENT_USER="${{ github.actor }}"
          TRIGGER_USER="${{ github.triggering_actor || github.actor }}"

          echo "🧑‍💻 Current user: $CURRENT_USER"
          echo "🎯 Triggering user: $TRIGGER_USER"

          # Перевіряємо чи користувач хоче додати лайк
          if [ "${{ github.event.inputs.add_like }}" = "true" ]; then
            echo "💖 User $TRIGGER_USER wants to add a like..."
            
            # Перевіряємо чи користувач вже голосував
            USER_EXISTS=$(jq --arg user "$TRIGGER_USER" '.unique_users | contains([$user])' likes-data.json)
            
            if [ "$USER_EXISTS" = "true" ]; then
              echo "⚠️ User $TRIGGER_USER has already liked this repository!"
              echo "LIKE_STATUS=already_liked" >> $GITHUB_ENV
            else
              echo "✅ Adding new like from user $TRIGGER_USER"
              
              # Додаємо користувача та збільшуємо лічильник
              jq --arg user "$TRIGGER_USER" --arg date "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                '.unique_users += [$user] | .total_likes += 1 | .last_updated = $date | if .created_at == "" then .created_at = $date else . end' \
                likes-data.json > likes-data.tmp && mv likes-data.tmp likes-data.json
              
              CURRENT_LIKES=$((CURRENT_LIKES + 1))
              echo "LIKE_STATUS=added" >> $GITHUB_ENV
              echo "🎉 Like added! Total: $CURRENT_LIKES"
            fi
          fi

          # Створюємо badge JSON
          cat > likes-count.json << EOF
          {
            "schemaVersion": 1,
            "label": "❤️ unique likes",
            "message": "$CURRENT_LIKES",
            "color": "${{ env.LIKES_COLOR }}",
            "style": "${{ env.BADGE_STYLE }}"
          }
          EOF

          echo "💖 Total unique likes: $CURRENT_LIKES"

      - name: Fetch unique repository traffic
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔹 Fetching unique repository views for ${{ github.repository }}..."

          TOKEN="${PAT_TOKEN:-$GITHUB_TOKEN}"

          # Отримуємо унікальні перегляди (не загальну кількість)
          UNIQUE_VIEWS=$(curl -s -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/traffic/views" \
            | jq '.uniques // 0')

          echo "🔍 API Response for unique views: $UNIQUE_VIEWS"

          # Fallback система для унікальних переглядів
          if [ "$UNIQUE_VIEWS" = "null" ] || [ -z "$UNIQUE_VIEWS" ] || [ "$UNIQUE_VIEWS" = "0" ]; then
            echo "⚠️ Could not fetch unique views from API, using fallback..."
            
            if [ ! -f "unique-visitors.json" ]; then
              cat > unique-visitors.json << 'EOF'
          {
            "unique_visitors": 1,
            "last_updated": "",
            "fallback_mode": true
          }
          EOF
              UNIQUE_VIEWS=1
            else
              CURRENT_UNIQUE=$(jq -r '.unique_visitors' unique-visitors.json 2>/dev/null || echo "1")
              
              # Інкрементуємо тільки якщо workflow запущено не ботом
              if [ "${{ github.actor }}" != "github-actions[bot]" ] && [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                UNIQUE_VIEWS=$((CURRENT_UNIQUE + 1))
                echo "👤 New unique visitor detected: $UNIQUE_VIEWS"
              else
                UNIQUE_VIEWS=$CURRENT_UNIQUE
              fi
              
              # Оновлюємо файл унікальних відвідувачів
              jq --arg count "$UNIQUE_VIEWS" --arg date "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                '.unique_visitors = ($count | tonumber) | .last_updated = $date' \
                unique-visitors.json > unique-visitors.tmp && mv unique-visitors.tmp unique-visitors.json
            fi
          fi

          echo "🟢 Unique Repository Views: $UNIQUE_VIEWS"

          # Створюємо badge для унікальних переглядів
          cat > visitor-count.json << EOF
          {
            "schemaVersion": 1,
            "label": "👀 unique views",
            "message": "$UNIQUE_VIEWS",
            "color": "${{ env.BADGE_COLOR }}",
            "style": "${{ env.BADGE_STYLE }}"
          }
          EOF

      - name: Update or create README.md
        run: |
          REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/main"

          # Отримуємо статистику
          LIKES=$(jq -r '.total_likes' likes-data.json 2>/dev/null || echo "0")
          UNIQUE_VIEWS=$(jq -r '.message' visitor-count.json 2>/dev/null || echo "0")
          UNIQUE_USERS=$(jq -r '.unique_users | length' likes-data.json 2>/dev/null || echo "0")

          # Створюємо повідомлення про статус лайка
          LIKE_MESSAGE=""
          if [ "${{ env.LIKE_STATUS }}" = "added" ]; then
            LIKE_MESSAGE="✅ **Дякуємо за лайк, ${{ github.triggering_actor }}!** 💖"
          elif [ "${{ env.LIKE_STATUS }}" = "already_liked" ]; then
            LIKE_MESSAGE="ℹ️ **${{ github.triggering_actor }}**, ви вже поставили лайк цьому проекту! 💖"
          fi

          # Створюємо новий README
          {
            echo "# ${{ github.event.repository.name }}"
            echo ""
            
            if [ -n "$LIKE_MESSAGE" ]; then
              echo "$LIKE_MESSAGE"
              echo ""
              echo "---"
              echo ""
            fi
            
            echo "<!-- Статистика унікальних користувачів -->"
            echo "![Unique Views](https://img.shields.io/endpoint?url=${REPO_URL}/visitor-count.json)"
            echo "![Unique Likes](https://img.shields.io/endpoint?url=${REPO_URL}/likes-count.json)"
            echo "![GitHub Stars](https://img.shields.io/github/stars/${{ github.repository }}?style=${{ env.BADGE_STYLE }}&color=yellow)"
            echo ""
            echo "---"
            echo ""
            echo "## 💖 Подобається проект?"
            echo ""
            echo "**Кожен користувач може поставити лише один лайк!** ❤️"
            echo ""
            echo "### 🎯 Як поставити свій унікальний лайк:"
            echo ""
            echo "1. **Перейдіть до [Actions](../../actions/workflows/$(basename ${{ github.workflow_ref }} .yml).yml)**"
            echo "2. **Натисніть \`Run workflow\`**" 
            echo "3. **Поставте галочку біля \`Add your like\`**"
            echo "4. **Натисніть \`Run workflow\`**"
            echo ""
            echo "### 📊 Поточна статистика:"
            echo "- 👀 **Унікальні перегляди**: ${UNIQUE_VIEWS}"
            echo "- 💖 **Унікальні лайки**: ${LIKES} від ${UNIQUE_USERS} користувач(ів)"
            echo "- ⭐ **GitHub Stars**: [Поставте зірочку!](../../stargazers)"
            echo ""
            echo "> 💡 **Підказка**: Якщо не можете поставити лайк через Actions, просто поставте ⭐ зірочку репозиторію!"
            echo ""
            echo "## 📸 Screenshot"
            echo ""
            
            if [ -f "screenshot.png" ]; then
              echo "![Screenshot](screenshot.png)"
            elif [ -f "screenshot.svg" ]; then
              echo "![Screenshot](screenshot.svg)"
            else
              echo "_Screenshot will be generated automatically_"
            fi
            
            echo ""
            
            # Додаємо список користувачів які поставили лайки (якщо є)
            if [ "$LIKES" -gt "0" ]; then
              echo "## 💝 Дякуємо за лайки:"
              echo ""
              jq -r '.unique_users[]' likes-data.json | while read -r user; do
                echo "- [@${user}](https://github.com/${user}) ❤️"
              done
              echo ""
            fi
            
            # Додаємо існуючий контент
            if [ -f "README_template.md" ]; then
              echo "---"
              echo ""
              cat README_template.md
            elif [ -f "README.md" ]; then
              # Зберігаємо тільки контент після розділів зі статистикою
              sed -n '/^## [^📸💖👀💝📊]/,$p' README.md 2>/dev/null || echo ""
            else
              echo "## ✨ Features"
              echo ""
              echo "- 📸 Automatic screenshot generation"
              echo "- 👀 **Unique** visitor counter"  
              echo "- 💖 **One like per user** system"
              echo "- 🤖 Updated via GitHub Actions"
              echo ""
              echo "## 🚀 About This System"
              echo ""
              echo "This repository uses an advanced workflow that tracks:"
              echo "- **Unique views** (not total page loads)"
              echo "- **Unique likes** (one per GitHub user)"
              echo "- **Real-time updates** through GitHub Actions"
              echo ""
              echo "_Last updated: $(date '+%Y-%m-%d %H:%M:%S UTC')_"
            fi
          } > README_new.md

          mv README_new.md README.md

      - name: Create likes interaction guide
        run: |
          cat > LIKES-GUIDE.md << 'EOF'
          # 💖 Унікальна система лайків

          ## ⚡ Швидкий старт

          1. **[Натисніть тут для лайка](../../actions/workflows/screenshot-update.yml)** 
          2. **Run workflow** → поставте галочку **Add your like** → **Run workflow**
          3. **Готово!** Ваш лайк додано до статистики 📊

          ## 🛡️ Унікальність системи

          ### 👤 Один користувач = один лайк
          - Кожен GitHub користувач може поставити **лише один лайк**
          - Система запам'ятовує всіх, хто вже голосував
          - Повторні лайки від того ж користувача **блокуються**

          ### 👀 Лише унікальні перегляди  
          - Лічильник показує **унікальних відвідувачів**, не загальні перегляди
          - Дані оновлюються через GitHub API traffic statistics
          - Фільтруються боти та повторні відвідування

          ## 📊 Статистика в реальному часі

          Всі дані оновлюються автоматично:
          - **Кожні 2 години** (scheduled)
          - **При push** нового коду
          - **При ручному запуску** workflow

          ## 🔒 Технічні деталі

          ### Файли системи:
          - `likes-data.json` - база даних лайків та користувачів
          - `unique-visitors.json` - fallback для унікальних відвідувачів  
          - `likes-count.json` - badge для лайків
          - `visitor-count.json` - badge для переглядів

          ### Структура даних лайків:
          ```json
          {
            "total_likes": 5,
            "unique_users": ["user1", "user2", "user3"],
            "created_at": "2024-01-01T00:00:00Z",
            "last_updated": "2024-01-01T12:00:00Z"
          }
          ```

          ## 🎯 Альтернативи

          Не можете поставити лайк через Actions? Спробуйте:

          1. **⭐ GitHub Star** - найпростіший спосіб
          2. **🍴 Fork** репозиторію
          3. **👥 Follow** автора проекту
          4. **💬 Issue** з текстом "👍 Like!"

          ## 🚨 Часті питання

          **Q: Чому я не можу поставити лайк повторно?**  
          A: Система дозволяє лише один лайк на користувача для чесності статистики.

          **Q: Чому кількість переглядів менша ніж очікував?**  
          A: Показуються лише **унікальні** відвідувачі, не загальна кількість переглядів.

          **Q: Як скинути свій лайк?**  
          A: Наразі це неможливо через дизайн системи. Лайки незворотні.

          ---

          💡 **Поради розробникам**: Ви можете адаптувати цю систему для своїх проектів!
          EOF

      - name: Check for changes
        id: changes
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected"
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git pull --rebase --autostash origin ${{ github.ref_name }} || true

          git add README.md screenshot.png screenshot.svg visitor-count.json likes-count.json likes-data.json unique-visitors.json LIKES-GUIDE.md 2>/dev/null || true

          # Формуємо commit message з статистикою
          LIKES=$(jq -r '.total_likes' likes-data.json 2>/dev/null || echo "0")
          UNIQUE_VIEWS=$(jq -r '.message' visitor-count.json 2>/dev/null || echo "0")

          COMMIT_MSG="📊 Stats: ${UNIQUE_VIEWS} unique views, ${LIKES} unique likes"

          if [ "${{ env.LIKE_STATUS }}" = "added" ]; then
            COMMIT_MSG="💖 New like from ${{ github.triggering_actor }}! Total: ${LIKES}"
          elif [ "${{ env.LIKE_STATUS }}" = "already_liked" ]; then
            COMMIT_MSG="⚠️ ${{ github.triggering_actor }} already liked (${LIKES} total)"
          fi

          git commit -m "$COMMIT_MSG [ci skip]" || {
            echo "⚠️ No changes to commit"
            exit 0
          }

          git push origin ${{ github.ref_name }}

      - name: Display results
        if: always()
        run: |
          echo "📊 Workflow Summary:"
          echo "=================="

          if [ -f "likes-data.json" ]; then
            LIKES=$(jq -r '.total_likes' likes-data.json)
            UNIQUE_USERS=$(jq -r '.unique_users | length' likes-data.json)
            echo "💖 Total Unique Likes: $LIKES from $UNIQUE_USERS users"
            
            if [ "$UNIQUE_USERS" -gt "0" ]; then
              echo "👥 Users who liked:"
              jq -r '.unique_users[]' likes-data.json | sed 's/^/   - @/'
            fi
          fi

          if [ -f "visitor-count.json" ]; then
            VIEWS=$(jq -r '.message' visitor-count.json)
            echo "👀 Total Unique Views: $VIEWS"
          fi

          if [ -f "screenshot.png" ]; then
            echo "📸 Screenshot: $(ls -lh screenshot.png | awk '{print $5}')"
          elif [ -f "screenshot.svg" ]; then
            echo "📄 Screenshot: SVG fallback created"
          fi

          # Статус лайка
          if [ "${{ env.LIKE_STATUS }}" = "added" ]; then
            echo "✅ Like Status: NEW LIKE from ${{ github.triggering_actor }}"
          elif [ "${{ env.LIKE_STATUS }}" = "already_liked" ]; then
            echo "⚠️ Like Status: ${{ github.triggering_actor }} already liked"
          else
            echo "ℹ️ Like Status: No like action requested"
          fi

          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "📝 Repository: ${{ github.repository }}"
          echo "🧑‍💻 Triggered by: ${{ github.triggering_actor || github.actor }}"
          echo "🕒 Updated: $(date '+%Y-%m-%d %H:%M:%S UTC')"
